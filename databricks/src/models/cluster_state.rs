/*
 * Jobs API 2.1
 *
 * The Jobs API allows you to create, edit, and delete jobs.
 *
 * The version of the OpenAPI document: 2.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ClusterState : * PENDING: Indicates that a cluster is in the process of being created. * RUNNING: Indicates that a cluster has been started and is ready for use. * RESTARTING: Indicates that a cluster is in the process of restarting. * RESIZING: Indicates that a cluster is in the process of adding or removing nodes. * TERMINATING: Indicates that a cluster is in the process of being destroyed. * TERMINATED: Indicates that a cluster has been successfully destroyed. * ERROR: This state is no longer used. It was used to indicate a cluster that failed to be created. `TERMINATING` and `TERMINATED` are used instead. * UNKNOWN: Indicates that a cluster is in an unknown state. A cluster should never be in this state. 

/// * PENDING: Indicates that a cluster is in the process of being created. * RUNNING: Indicates that a cluster has been started and is ready for use. * RESTARTING: Indicates that a cluster is in the process of restarting. * RESIZING: Indicates that a cluster is in the process of adding or removing nodes. * TERMINATING: Indicates that a cluster is in the process of being destroyed. * TERMINATED: Indicates that a cluster has been successfully destroyed. * ERROR: This state is no longer used. It was used to indicate a cluster that failed to be created. `TERMINATING` and `TERMINATED` are used instead. * UNKNOWN: Indicates that a cluster is in an unknown state. A cluster should never be in this state. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ClusterState {
    #[serde(rename = "PENDING")]
    PENDING,
    #[serde(rename = "RUNNING")]
    RUNNING,
    #[serde(rename = "RESTARTING")]
    RESTARTING,
    #[serde(rename = "RESIZING")]
    RESIZING,
    #[serde(rename = "TERMINATING")]
    TERMINATING,
    #[serde(rename = "TERMINATED")]
    TERMINATED,
    #[serde(rename = "ERROR")]
    ERROR,
    #[serde(rename = "UNKNOWN")]
    UNKNOWN,

}

impl ToString for ClusterState {
    fn to_string(&self) -> String {
        match self {
            Self::PENDING => String::from("PENDING"),
            Self::RUNNING => String::from("RUNNING"),
            Self::RESTARTING => String::from("RESTARTING"),
            Self::RESIZING => String::from("RESIZING"),
            Self::TERMINATING => String::from("TERMINATING"),
            Self::TERMINATED => String::from("TERMINATED"),
            Self::ERROR => String::from("ERROR"),
            Self::UNKNOWN => String::from("UNKNOWN"),
        }
    }
}

impl Default for ClusterState {
    fn default() -> ClusterState {
        Self::PENDING
    }
}




